name: Build and Push Supplier API Docker Image to ECR

on:
  push:
    branches: [master]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      ECR_REPOSITORY: supplier-due-diligence-backend
      IMAGE_TAG: latest

    steps:
      - name: Placeholder - Pipeline defined for future container deployment
        run: echo "This workflow is defined for future containerized API build and deployment (AWS ECR). Steps are temporarily disabled."

      # - name: Checkout repo
      #   uses: actions/checkout@v3

      # - name: Setup .NET SDK
      #   uses: actions/setup-dotnet@v4
      #   with:
      #     dotnet-version: 9.0.x

      # - name: Restore dependencies
      #   run: dotnet restore SupplierDueDiligence.API/SupplierDueDiligence.API.csproj

      # - name: Build
      #   run: dotnet build SupplierDueDiligence.API/SupplierDueDiligence.API.csproj --configuration Release --no-restore

      # - name: Publish
      #   run: dotnet publish SupplierDueDiligence.API/SupplierDueDiligence.API.csproj --configuration Release --output SupplierDueDiligence.API/publish --no-build

      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ env.AWS_REGION }}

      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v2

      # - name: Build, tag and push Docker image to ECR
      #   run: |
      #     IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
      #     docker build -t $IMAGE_URI -f SupplierDueDiligence.API/Dockerfile SupplierDueDiligence.API
      #     docker push $IMAGE_URI
